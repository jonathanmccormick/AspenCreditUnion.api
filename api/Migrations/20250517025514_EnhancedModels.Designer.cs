// <auto-generated />
using System;
using AspenCreditUnion.api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AspenCreditUnion.api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250517025514_EnhancedModels")]
    partial class EnhancedModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AspenCreditUnion.api.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("BranchId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("InterestRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("OverdraftLimit")
                        .HasColumnType("numeric");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasDiscriminator<string>("AccountType").HasValue("Account");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AspenCreditUnion.api.Models.ActiveToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DeviceInfo")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("Id");

                    b.HasIndex("JwtId");

                    b.HasIndex("UserId");

                    b.ToTable("ActiveTokens");
                });

            modelBuilder.Entity("AspenCreditUnion.api.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AspenCreditUnion.api.Models.Loan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AutoPay")
                        .HasColumnType("boolean");

                    b.Property<string>("BorrowerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FirstPaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("InterestRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<DateTime?>("LastPaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("LatePaymentFee")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("LinkedAccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoanNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LoanType")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.Property<decimal>("MinimumPayment")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("NextPaymentDue")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PaymentDay")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentFrequencyType")
                        .HasColumnType("integer");

                    b.Property<decimal>("Principal")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalAmountPaid")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalInterestPaid")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Loans");

                    b.HasDiscriminator<string>("LoanType").HasValue("Loan");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AspenCreditUnion.api.Models.LoanPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("ConfirmationNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("FeesAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("InterestAmount")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsAutoPay")
                        .HasColumnType("boolean");

                    b.Property<decimal>("LateFeeAmount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("LoanId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentSource")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PrincipalAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LoanId");

                    b.ToTable("LoanPayment");
                });

            modelBuilder.Entity("AspenCreditUnion.api.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("RevokedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("AspenCreditUnion.api.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DestinationAccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Fee")
                        .HasColumnType("numeric");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("OriginalAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("OriginalCurrency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("SettlementDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SourceAccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AspenCreditUnion.api.Models.CertificateOfDepositAccount", b =>
                {
                    b.HasBaseType("AspenCreditUnion.api.Models.Account");

                    b.Property<decimal>("AccruedInterest")
                        .HasColumnType("numeric");

                    b.Property<bool>("AutoRenew")
                        .HasColumnType("boolean");

                    b.Property<decimal>("EarlyWithdrawalPenalty")
                        .HasColumnType("numeric");

                    b.Property<int>("GracePeriodDays")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLaddered")
                        .HasColumnType("boolean");

                    b.Property<int>("LadderPosition")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastRenewalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("MaturityDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MinimumDepositAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("RenewalTerms")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TermMonths")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("CertificateOfDepositAccount");
                });

            modelBuilder.Entity("AspenCreditUnion.api.Models.CheckingAccount", b =>
                {
                    b.HasBaseType("AspenCreditUnion.api.Models.Account");

                    b.Property<decimal>("ATMFee")
                        .HasColumnType("numeric");

                    b.Property<bool>("BillPayEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("DirectDepositEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("FreeTransactionsPerMonth")
                        .HasColumnType("integer");

                    b.Property<bool>("HasDebitCard")
                        .HasColumnType("boolean");

                    b.Property<decimal>("MinimumBalanceRequired")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MonthlyMaintenanceFee")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("OverdraftLinkedAccountId")
                        .HasColumnType("uuid");

                    b.Property<bool>("OverdraftProtection")
                        .HasColumnType("boolean");

                    b.Property<decimal>("TransactionFee")
                        .HasColumnType("numeric");

                    b.HasDiscriminator().HasValue("CheckingAccount");
                });

            modelBuilder.Entity("AspenCreditUnion.api.Models.MoneyMarketAccount", b =>
                {
                    b.HasBaseType("AspenCreditUnion.api.Models.Account");

                    b.Property<decimal>("CheckFee")
                        .HasColumnType("numeric");

                    b.Property<bool>("CheckWritingEnabled")
                        .HasColumnType("boolean");

                    b.Property<decimal>("ExcessTransactionFee")
                        .HasColumnType("numeric");

                    b.Property<int>("FreeChecksPerMonth")
                        .HasColumnType("integer");

                    b.Property<decimal>("HighestTierRate")
                        .HasColumnType("numeric");

                    b.Property<decimal>("LowBalanceFee")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MinimumBalanceRequired")
                        .HasColumnType("numeric");

                    b.Property<string>("RateTierStructure")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("TieredInterestRates")
                        .HasColumnType("boolean");

                    b.Property<int>("TransactionsPerMonth")
                        .HasColumnType("integer");

                    b.ToTable("Accounts", t =>
                        {
                            t.Property("MinimumBalanceRequired")
                                .HasColumnName("MoneyMarketAccount_MinimumBalanceRequired");
                        });

                    b.HasDiscriminator().HasValue("MoneyMarketAccount");
                });

            modelBuilder.Entity("AspenCreditUnion.api.Models.SavingsAccount", b =>
                {
                    b.HasBaseType("AspenCreditUnion.api.Models.Account");

                    b.Property<string>("CompoundingFrequency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("GoalAmount")
                        .HasColumnType("numeric");

                    b.Property<bool>("GoalBasedSaving")
                        .HasColumnType("boolean");

                    b.Property<string>("InterestPaymentFrequency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastInterestPaid")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MinimumBalanceRequired")
                        .HasColumnType("numeric");

                    b.Property<string>("SavingGoal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TotalInterestEarned")
                        .HasColumnType("numeric");

                    b.Property<decimal>("WithdrawalFee")
                        .HasColumnType("numeric");

                    b.Property<int>("WithdrawalsPerMonth")
                        .HasColumnType("integer");

                    b.Property<decimal>("YearToDateInterestEarned")
                        .HasColumnType("numeric");

                    b.ToTable("Accounts", t =>
                        {
                            t.Property("MinimumBalanceRequired")
                                .HasColumnName("SavingsAccount_MinimumBalanceRequired");
                        });

                    b.HasDiscriminator().HasValue("SavingsAccount");
                });

            modelBuilder.Entity("AspenCreditUnion.api.Models.AutoLoan", b =>
                {
                    b.HasBaseType("AspenCreditUnion.api.Models.Loan");

                    b.Property<string>("DealerAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DealerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("DownPayment")
                        .HasColumnType("numeric");

                    b.Property<bool>("ExtendedWarranty")
                        .HasColumnType("boolean");

                    b.Property<bool>("GapInsurance")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("InsuranceExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InsurancePolicyNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InsuranceProvider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsLeased")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRefinance")
                        .HasColumnType("boolean");

                    b.Property<string>("LienHolderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("numeric");

                    b.Property<string>("VehicleMake")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VehicleModel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VehicleVin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VehicleYear")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("WarrantyExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasDiscriminator().HasValue("AutoLoan");
                });

            modelBuilder.Entity("AspenCreditUnion.api.Models.CreditCardLoan", b =>
                {
                    b.HasBaseType("AspenCreditUnion.api.Models.Loan");

                    b.Property<decimal>("AnnualFee")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<bool>("AutoPayEnabled")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("AutoPayFromAccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("AutoPayType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("AvailableCredit")
                        .HasColumnType("numeric");

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("CashAdvanceFee")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CashAdvanceInterestRate")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CashAdvanceLimit")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CreditLimit")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("CurrentCashbackBalance")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ForeignTransactionFee")
                        .HasColumnType("numeric");

                    b.Property<int>("GracePeriodDays")
                        .HasColumnType("integer");

                    b.Property<bool>("IsSecured")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVirtual")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastStatementDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("LastStatementMinimumPayment")
                        .HasColumnType("numeric");

                    b.Property<decimal>("LateFee")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MinimumPaymentAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MinimumPaymentPercentage")
                        .HasColumnType("numeric");

                    b.Property<decimal>("OverLimitFee")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("PaymentDueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RewardPointsBalance")
                        .HasColumnType("integer");

                    b.Property<string>("RewardProgram")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("StatementBalance")
                        .HasColumnType("numeric");

                    b.ToTable("Loans", t =>
                        {
                            t.Property("AnnualFee")
                                .HasColumnName("CreditCardLoan_AnnualFee");

                            t.Property("CreditLimit")
                                .HasColumnName("CreditCardLoan_CreditLimit");
                        });

                    b.HasDiscriminator().HasValue("CreditCardLoan");
                });

            modelBuilder.Entity("AspenCreditUnion.api.Models.HelocLoan", b =>
                {
                    b.HasBaseType("AspenCreditUnion.api.Models.Loan");

                    b.Property<bool>("AllowsConversion")
                        .HasColumnType("boolean");

                    b.Property<decimal>("AnnualFee")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CombinedLoanToValueRatio")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CreditLimit")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("CurrentEquity")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("DrawPeriodEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DrawPeriodMonths")
                        .HasColumnType("integer");

                    b.Property<decimal>("FirstMortgageBalance")
                        .HasColumnType("numeric");

                    b.Property<bool>("HasBalloonPayment")
                        .HasColumnType("boolean");

                    b.Property<string>("IndexUsed")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("InitialPromotionalRate")
                        .HasColumnType("numeric");

                    b.Property<decimal>("InterestOnlyPayment")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsVariableRate")
                        .HasColumnType("boolean");

                    b.Property<decimal>("MarginRate")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MinimumDrawAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("OriginationFee")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("PromotionalRateEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PropertyAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PropertyValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("RepaymentPeriodMonths")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("HelocLoan");
                });

            modelBuilder.Entity("AspenCreditUnion.api.Models.MortgageLoan", b =>
                {
                    b.HasBaseType("AspenCreditUnion.api.Models.Loan");

                    b.Property<decimal>("AdjustableRateMargin")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DownPayment")
                        .HasColumnType("numeric");

                    b.Property<decimal>("EscrowBalance")
                        .HasColumnType("numeric");

                    b.Property<bool>("EscrowEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("FirstAdjustmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("HomeownersInsurance")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsFixedRate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrimaryResidence")
                        .HasColumnType("boolean");

                    b.Property<int>("LoanTermYears")
                        .HasColumnType("integer");

                    b.Property<decimal>("LoanToValueRatio")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MonthlyPrincipalAndInterest")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PMIAmount")
                        .HasColumnType("numeric");

                    b.Property<bool>("PrePaymentPenalty")
                        .HasColumnType("boolean");

                    b.Property<string>("PropertyAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PropertyTaxes")
                        .HasColumnType("numeric");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PropertyValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("RateAdjustmentFrequency")
                        .HasColumnType("integer");

                    b.Property<decimal>("RateCap")
                        .HasColumnType("numeric");

                    b.Property<string>("RateIndex")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Loans", t =>
                        {
                            t.Property("DownPayment")
                                .HasColumnName("MortgageLoan_DownPayment");

                            t.Property("PropertyAddress")
                                .HasColumnName("MortgageLoan_PropertyAddress");

                            t.Property("PropertyType")
                                .HasColumnName("MortgageLoan_PropertyType");

                            t.Property("PropertyValue")
                                .HasColumnName("MortgageLoan_PropertyValue");
                        });

                    b.HasDiscriminator().HasValue("MortgageLoan");
                });

            modelBuilder.Entity("AspenCreditUnion.api.Models.PersonalLineOfCreditLoan", b =>
                {
                    b.HasBaseType("AspenCreditUnion.api.Models.Loan");

                    b.Property<bool>("AllowsChecks")
                        .HasColumnType("boolean");

                    b.Property<decimal>("AnnualFee")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AvailableCredit")
                        .HasColumnType("numeric");

                    b.Property<string>("CoSignerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CollateralDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("CollateralValue")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CreditLimit")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("DrawPeriodEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DrawPeriodMonths")
                        .HasColumnType("integer");

                    b.Property<bool>("HasCoSigner")
                        .HasColumnType("boolean");

                    b.Property<string>("IndexUsed")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsSecured")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVariableRate")
                        .HasColumnType("boolean");

                    b.Property<decimal>("LateFee")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MarginRate")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MinimumDrawAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MinimumPaymentAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MinimumPaymentPercentage")
                        .HasColumnType("numeric");

                    b.Property<decimal>("OriginationFee")
                        .HasColumnType("numeric");

                    b.Property<decimal>("OverLimitFee")
                        .HasColumnType("numeric");

                    b.Property<int>("RepaymentPeriodMonths")
                        .HasColumnType("integer");

                    b.ToTable("Loans", t =>
                        {
                            t.Property("AnnualFee")
                                .HasColumnName("PersonalLineOfCreditLoan_AnnualFee");

                            t.Property("AvailableCredit")
                                .HasColumnName("PersonalLineOfCreditLoan_AvailableCredit");

                            t.Property("CreditLimit")
                                .HasColumnName("PersonalLineOfCreditLoan_CreditLimit");

                            t.Property("DrawPeriodEndDate")
                                .HasColumnName("PersonalLineOfCreditLoan_DrawPeriodEndDate");

                            t.Property("DrawPeriodMonths")
                                .HasColumnName("PersonalLineOfCreditLoan_DrawPeriodMonths");

                            t.Property("IndexUsed")
                                .HasColumnName("PersonalLineOfCreditLoan_IndexUsed");

                            t.Property("IsSecured")
                                .HasColumnName("PersonalLineOfCreditLoan_IsSecured");

                            t.Property("IsVariableRate")
                                .HasColumnName("PersonalLineOfCreditLoan_IsVariableRate");

                            t.Property("LateFee")
                                .HasColumnName("PersonalLineOfCreditLoan_LateFee");

                            t.Property("MarginRate")
                                .HasColumnName("PersonalLineOfCreditLoan_MarginRate");

                            t.Property("MinimumDrawAmount")
                                .HasColumnName("PersonalLineOfCreditLoan_MinimumDrawAmount");

                            t.Property("MinimumPaymentAmount")
                                .HasColumnName("PersonalLineOfCreditLoan_MinimumPaymentAmount");

                            t.Property("MinimumPaymentPercentage")
                                .HasColumnName("PersonalLineOfCreditLoan_MinimumPaymentPercentage");

                            t.Property("OriginationFee")
                                .HasColumnName("PersonalLineOfCreditLoan_OriginationFee");

                            t.Property("OverLimitFee")
                                .HasColumnName("PersonalLineOfCreditLoan_OverLimitFee");

                            t.Property("RepaymentPeriodMonths")
                                .HasColumnName("PersonalLineOfCreditLoan_RepaymentPeriodMonths");
                        });

                    b.HasDiscriminator().HasValue("PersonalLineOfCreditLoan");
                });

            modelBuilder.Entity("AspenCreditUnion.api.Models.PersonalLoan", b =>
                {
                    b.HasBaseType("AspenCreditUnion.api.Models.Loan");

                    b.Property<bool>("AllowsExtraPayments")
                        .HasColumnType("boolean");

                    b.Property<string>("AmortizationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ApplicationFee")
                        .HasColumnType("numeric");

                    b.Property<decimal>("BalloonPaymentAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("CoSignerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CollateralDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("CollateralValue")
                        .HasColumnType("numeric");

                    b.Property<bool>("HasCoSigner")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSecured")
                        .HasColumnType("boolean");

                    b.Property<decimal>("LateFee")
                        .HasColumnType("numeric");

                    b.Property<int>("LoanTermMonths")
                        .HasColumnType("integer");

                    b.Property<decimal>("MonthlyPaymentAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("OriginationFee")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PrePaymentPenalty")
                        .HasColumnType("numeric");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RepaymentFrequency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Loans", t =>
                        {
                            t.Property("CoSignerId")
                                .HasColumnName("PersonalLoan_CoSignerId");

                            t.Property("CollateralDescription")
                                .HasColumnName("PersonalLoan_CollateralDescription");

                            t.Property("CollateralValue")
                                .HasColumnName("PersonalLoan_CollateralValue");

                            t.Property("HasCoSigner")
                                .HasColumnName("PersonalLoan_HasCoSigner");

                            t.Property("IsSecured")
                                .HasColumnName("PersonalLoan_IsSecured");

                            t.Property("LateFee")
                                .HasColumnName("PersonalLoan_LateFee");

                            t.Property("OriginationFee")
                                .HasColumnName("PersonalLoan_OriginationFee");

                            t.Property("PrePaymentPenalty")
                                .HasColumnName("PersonalLoan_PrePaymentPenalty");
                        });

                    b.HasDiscriminator().HasValue("PersonalLoan");
                });

            modelBuilder.Entity("AspenCreditUnion.api.Models.LoanPayment", b =>
                {
                    b.HasOne("AspenCreditUnion.api.Models.Loan", null)
                        .WithMany("PaymentHistory")
                        .HasForeignKey("LoanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AspenCreditUnion.api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AspenCreditUnion.api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspenCreditUnion.api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AspenCreditUnion.api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AspenCreditUnion.api.Models.Loan", b =>
                {
                    b.Navigation("PaymentHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
